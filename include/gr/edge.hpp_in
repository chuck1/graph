{{ include_block_open }}

#include <memory>
#include <set>
#include <vector>

#include <gr/edge_data.hpp> // gr/edge_data.hpp_in

#include <gr/decl.hpp> // gr/decl.hpp_in

{{ namespace_open }}


class edge
{
public:
	//edge();
	edge(gr::VERT_S const & v0, gr::VERT_S const & v1);
	
	virtual std::string	name() const;
	gr::VERT_S		other(gr::VERT_S) const;
	bool			enabled() const;
	/**
	 * swap verticies
	 *
	 * used to change direction of edge
	 */
	void			swap();
	gr::VERT_S		v0() const;
	gr::VERT_S		v1() const;
	bool			contains(gr::VERT_S) const;

	virtual bool		operator<(edge const &) const;
	bool			operator==(edge const &) const;
	bool			operator!=(edge const &) const;

	gr::VERT_W		_M_v0;
	gr::VERT_W		_M_v1;

	bool			_M_enabled;
};


{{ namespace_close }}

{{ include_block_close }}

