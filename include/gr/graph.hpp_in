{{ include_block_open }}

#include <memory>
#include <set>
#include <vector>
#include <deque>

#include <logs/logger.hpp> // logs/logger.hpp_in

#include <gr/decl.hpp> // gr/decl.hpp_in
//#include <gr/algo/ftor_dfs/ftor_dfs.hpp> // gr/algo/ftor_dfs/ftor_dfs.hpp_in
#include <gr/algo/cycle.hpp> // gr/algo/cycle.hpp_in
#include <gr/iterator/edge/EdgeGraphPlot.hpp> // gr/iterator/iterator.hpp_in
#include <gr/iterator/vert/VertGraphPlot.hpp> // gr/iterator/iterator.hpp_in
#include <gr/iterator/vert/VertComp.hpp> // gr/iterator/iterator.hpp_in
#include <gr/iterator/vert/VertGraph.hpp> // gr/iterator/vert/VertGraph.hpp_in
#include <gr/iterator/vert/VertGraphLayer.hpp> // gr/iterator/vert/VertGraphLayer.hpp_in
#include <gr/iterator/vert/VertGraphAll.hpp> // gr/iterator/vert_graph_all.hpp.in
#include <gr/container/vert.hpp> // gr/container/vert.hpp_in

{{ namespace_open }}

class graph: 
	public std::enable_shared_from_this<graph>,
	public logs::logger<graph, {{ logs_mode }}, {{ logs_level }}>
{
public:
	typedef logs::logger<graph, {{ logs_mode }}, {{ logs_level }}> LOGGER;
	//Graph(Graph const & g);

	typedef std::deque<gr::VERT_S> STACK_VERT;

	graph();
	virtual ~graph() {}
	void						clear();
	GRAPH_S						copy() const;
	void						spanning_tree(VERT_S v);

	EDGE_S						add_edge(VERT_S v0, VERT_S v1);
	/*
	 * v should be a vertex with exactly two neighbors, v0 and v1
	 */
	EDGE_S						add_virtual_edge(VERT_S v0, VERT_S v1, VERT_S v);
	void						add_edge(EDGE_S e);

	void						edge_enable();
	//void						vert_enable();
	
	Eigen::MatrixXd					connectivity_matrix();

	/** vert functions */

	gr::iterator::vert::VertGraph			iter(gr::VERT_S v);

	gr::iterator::vert::VertGraph			vert_find(gr::VERT_S v);
	gr::iterator::vert::VertGraph			vert_erase(gr::iterator::vert::VertGraph &);
	//void						vert_erase_layer(unsigned int l);
	
	gr::LAYER_S					create_layer(bool);

	gr::iterator::vert::VertGraphAll		vert_begin_all(VERT_FUNC);
	gr::iterator::vert::VertGraphAll		vert_end_all(VERT_FUNC);
	gr::iterator::vert::VertGraphAll		vert_begin_all();
	gr::iterator::vert::VertGraphAll		vert_end_all();

	gr::iterator::vert::VertGraphConst		vert_begin() const;
	gr::iterator::vert::VertGraphConst		vert_end() const;

	gr::iterator::vert::VertGraph			vert_begin();
	gr::iterator::vert::VertGraph			vert_end();
	gr::Range<gr::iterator::vert::VertGraph>	vert_range();
	unsigned int					vert_size();

	gr::iterator::vert::VertGraphLayer		vert_layer_begin();
	gr::iterator::vert::VertGraphLayer		vert_layer_end();
	gr::Range<gr::iterator::vert::VertGraphLayer>	vert_layer_range();

	gr::iterator::vert::VertComp			comp_vert_begin(int);
	gr::iterator::vert::VertComp			comp_vert_end(int);
	unsigned int					comp_vert_size(int);

	void						longest_cycle_1(gr::S_Layer);
	void						longest_cycle_2();

	bool						connected_by_one(
			gr::S_Vert const & v0,
			gr::S_Vert const & v1,
			bool allow_common_neighbors);

	/** edge functions */
	gr::iterator::edge::EdgeGraphConst		edge_begin() const;
	gr::iterator::edge::EdgeGraphConst		edge_end() const;

	gr::iterator::edge::EdgeGraph			edge_begin();
	gr::iterator::edge::EdgeGraph			edge_end();
	unsigned int					edge_size();
	gr::Range<gr::iterator::edge::EdgeGraph>	edge_range();

	gr::iterator::edge::EdgeGraphPlot		edge_begin_plot();
	gr::iterator::edge::EdgeGraphPlot		edge_end_plot();

	gr::iterator::vert::VertGraphPlot		vert_begin_plot();
	gr::iterator::vert::VertGraphPlot		vert_end_plot();

	void						edge_erase();

	void						edge_erase_util(VERT_S &, VERT_S &);
	void						edge_erase(VERT_S &, VERT_S &);

	gr::iterator::edge::EdgeGraph			edge_erase(gr::iterator::edge::EdgeGraph);

	bool						identify_connected_by_one_once(gr::LAYER_S const &,
			bool allow_common_neighbors);
	void						identify_connected_by_one(gr::LAYER_S const &,
			bool allow_common_neighbors);

	/** algorithms */

	void				shortest_path(gr::VERT_S const &);

	std::vector<gr::EDGE_S>		bridges();
	void				mark_bridges(gr::LAYER_S layer);

	void				identify_vertices(
		gr::S_Vert const & v0,
		gr::S_Vert const & v1,
		gr::LAYER_S const &);

	bool				add_virtual_edges(gr::LAYER_S layer);

	gr::S_Vert			furthest(gr::S_Vert const & v0);

	void				depth_first_search(
			gr::EDGE_S const & v0,
			gr::EDGE_S const & v,
			algo::stack & stack,
			algo::ftor_dfs::ftor_dfs_edge *);
	void				depth_first_search(
			algo::ftor_dfs::ftor_dfs_edge *,
			gr::EDGE_S const & v);
	void				depth_first_search(
			algo::ftor_dfs::ftor_dfs_edge *);

	/** 
	 * no repeated verts
	 */
	void				depth_first_search2(
			gr::EDGE_S const & v0,
			gr::EDGE_S const & v,
			algo::stack & stack,
			STACK_VERT & stack_vert,
			algo::ftor_dfs::ftor_dfs_edge *);
	void				depth_first_search2(
			algo::ftor_dfs::ftor_dfs_edge *,
			gr::EDGE_S const & v);
	void				depth_first_search2(
			algo::ftor_dfs::ftor_dfs_edge *);

	void				depth_first_search(
			gr::VERT_S const & v0,
			gr::VERT_S const & v,
			algo::stack & stack,
			algo::ftor_dfs::ftor_dfs_vert *);
	void				depth_first_search(
			algo::ftor_dfs::ftor_dfs_vert *,
			gr::VERT_S const & v);
	void				depth_first_search(
			algo::ftor_dfs::ftor_dfs_vert *);

	/**
	 */
	void				depth_first_search3(
			gr::VERT_S const & v0,
			gr::VERT_S const & v,
			algo::ftor_dfs::ftor_dfs_vert2 *);
	void				depth_first_search3(
			algo::ftor_dfs::ftor_dfs_vert2 *,
			gr::VERT_S const & v);
	void				depth_first_search3(
			algo::ftor_dfs::ftor_dfs_vert2 *);

	algo::SET_CYCLE			cycles0();
	algo::SET_CYCLE			cycles1();
	
	algo::SET_CYCLE			cycles0_vert();

	algo::ftor_dfs::SET_QUEUE_EDGE	paths0();
	algo::ftor_dfs::SET_QUEUE_EDGE	paths1();
	
	/**
	 * check is there exists a cycle with edge e
	 */
	bool				cycle_exists(gr::EDGE_S const & e);
	
	/*
	 * mark each vertex with an index representing the component to which it belongs
	 * a component is a subgraph that is disconnected from the rest of the graph
	 */
	int				components();
	void				components_util(VERT_S const & n, int c);
	void				component(int c);

	void				mark_leaves_recursive(gr::LAYER_S layer);
	void				identify_leaves_recursive(gr::LAYER_S layer);

	void				arrange();
	void				arrange2(gr::VERT_S);

	virtual void			dot_sub0(std::ostream & of);
	virtual void			dot_sub1(std::ostream & of);
	void				dot(gr::VERT_S const & v);
	void				dot(std::string filename, gr::VERT_S const & v);
	void				dot(std::string filename);
	/**
	 * automatic file name
	 */
	void				dot();
	virtual std::string		dot_edge_symbol();
	
	/**
	 * simplify according to the following
	 *
	 *  - remove verticies that are adjacent to exactly one edge
	 */
	gr::GRAPH_S			simplify() const;
	void				simplify_self();

	//void				layer_move(unsigned int, unsigned int);
	
	void				for_each_leaf(std::function<void(gr::VERT_S const &, gr::EDGE_S const &)> func);

	std::vector<gr::LAYER_S>	_M_layers;
	
	gr::container::vert		_M_verts;

	struct {
		GRAPH_S			graph;
		std::deque<gr::EDGE_S>	graph_stack;
		VERT_S			graph_head;
	} _M_algo;
	struct {
	} _M_dot;
};
class digraph: public graph
{
public:
	virtual void			dot_sub0(std::ostream & of);
	virtual std::string		dot_edge_symbol();
};

{{ namespace_close }}

{{ include_block_close }}

