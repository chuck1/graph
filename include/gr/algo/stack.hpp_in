{{ include_block_open }}

#include <memory>
#include <set>
#include <vector>
#include <map>

#include <gr/decl.hpp> // gr/decl.hpp_in

{{ namespace_open }}

class stack
{
	public:
		typedef gr::S_Edge T;
		typedef std::deque<T> CONTAINER;
		typedef typename CONTAINER::iterator ITERATOR;

		stack();
		unsigned int			size() const;
		void				push_back(gr::EDGE_S const &);
		void				pop_back();
		void				pop_front();
		bool				empty() const;
		bool				contains(T const &);
		gr::EDGE_S			front();
		ITERATOR			begin();
		ITERATOR			end();
		int				counter(gr::VERT_S const &) const;
		void				resize(typename CONTAINER::size_type);
	private:
		void				push(gr::VERT_S const &);
		void				pop(gr::VERT_S const &);

		CONTAINER			_M_edges;
		std::map<gr::VERT_S, int>	_M_counter;
	public:
		int				_M_count_gt_2;
};

{{ namespace_close }}

{{ include_block_close }}



