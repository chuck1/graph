{{ include_block_open }}

#include <memory>
#include <set>
#include <vector>

#include <eigen3/Eigen/Core>

#include <gr/decl.hpp> // gr/decl.hpp_in
#include <gr/Range.hpp> // gr/Range.hpp_in
#include <gr/LayerStack.hpp>
#include <gr/iterator/edge/EdgeVert.hpp> // gr/iterator/iterator.hpp.in

{{ namespace_open }}

class vert_dot
{
public:
	vert_dot():
		p(0,0),
		f(0,0),
		pos(""),
		shape("oval")
	{}
	Eigen::Vector2f		p;
	Eigen::Vector2f		f;
	std::string	pos;
	std::string	shape;
};

class Vert: public std::enable_shared_from_this<Vert>
{
public:
	friend class gr::graph::Graph;
	friend class gr::iterator::edge::EdgeGraph;

	Vert(graph::S_Graph);
	virtual ~Vert();
	virtual gr::VERT_S	copy(graph::S_Graph) const;
	bool			enabled() const;
	graph::S_Graph			get_graph() const;
	/*
	std::vector<S_Edge>	get_edges();
	S_Node			get_other(graph::S_Edge e);
	SET_Node		get_adjacent_verts();
	VEC_PAIR		get_adjacent();
	*/
	
	void			shortest_path(gr::PATH & path);

	gr::iterator::edge::EdgeVert			edge_begin();
	gr::iterator::edge::EdgeVert			edge_end();
	gr::iterator::edge::EdgeVert			edge_erase(gr::iterator::edge::EdgeVert &);
	gr::Range<gr::iterator::edge::EdgeVert>		edge_range();

	unsigned int			edge_size();

	void				edge_erase_disconnected();

	void				add_edge(gr::EDGE_S);

      	void				edge_erase_util(gr::VERT_S & v0, gr::VERT_S & v1);

	virtual bool			operator==(Vert const &);
	virtual bool			operator!=(Vert const &);
	virtual bool			operator<(Vert const &);

	virtual std::string		dot();
	virtual std::string		name();

	void				set_pos();

	vert_dot		_M_dot;

	// for creating connectivity matrix
	unsigned int			_M_i;
	// for bridge-finding algorithm
	struct {
		int		_M_disc;
		int		_M_low;
		bool		_M_visited;
		VERT_W		_M_parent;
	} bridge;
	struct {
		int		i;
		float		a1;
		float		a2;
	} tree_arrange1;
	struct {
		int		i;
		float		a1;
		float		a2;
	} tree_arrange2;
	struct {
		float		d;
		gr::S_Edge	e;
	} _M_shortest_path;

	// for marking components
	struct {
		bool		_M_visited;
		int		_M_c;
	} comp;

	struct {
		bool		_M_visited;
	} dfs;

	struct {
		int		counter;
	} algo;
	bool			_M_visited;
	bool			_M_visited2;
	// the virtual vertex that has replaced this one
	
public:
	gr::VERT_S		virt();
	
private:
	gr::VERT_W		_M_virt;
public:
// private

	graph::W_Graph		_M_graph;
//private:	
	gr::container::EDGE_S	_M_edges;
public:
	LayerStack		_M_layer;
};

{{ namespace_close }}

{{ include_block_close }}



