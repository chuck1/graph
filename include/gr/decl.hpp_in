{{ include_block_open }}

#include <set>
#include <vector>
#include <memory>
#include <deque>

{{ namespace_open }}

class vert;
class edge;

class vert_comp;
//class pair_comp;

class edge_data;

class edge_algo_data;

//class pair;

class graph;

template<typename T>
class Property;

class layer;

typedef std::shared_ptr<layer>	LAYER_S;
typedef std::weak_ptr<layer>	LAYER_W;

namespace container {
	class edge;
	class vert;

	typedef std::shared_ptr<edge> EDGE_S;
}

namespace iterator {
	class edge_graph;
	class edge_vert;
}

typedef std::shared_ptr<graph>			GRAPH_S;
typedef std::weak_ptr<graph>			GRAPH_W;

typedef vert					VERT;
typedef edge					EDGE;
typedef edge_data				EDGE_DATA;

typedef std::shared_ptr<EDGE>			EDGE_S;
typedef std::shared_ptr<EDGE>			S_Edge;

typedef std::shared_ptr<VERT>			VERT_S;
typedef std::weak_ptr<VERT>			VERT_W;
typedef std::shared_ptr<VERT>			S_Vert;

typedef std::shared_ptr<EDGE_DATA>		EDGE_DATA_S;

typedef std::set<EDGE_S>			CONT_EDGE;

typedef std::set<gr::VERT_S, gr::vert_comp>	CONT_VERT;

typedef std::function<bool(gr::VERT_S const &)>	VERT_FUNC;

typedef std::deque<gr::EDGE_S>			QUEUE_EDGE;

namespace algo {
	namespace ftor_dfs {
		class ftor_dfs_vert;
		class ftor_dfs_vert2;
		class ftor_dfs_edge;
	
		class less_queue_edge;

		typedef std::set<QUEUE_EDGE, less_queue_edge>	SET_QUEUE_EDGE;
	}
	class less_queue_edge;
	class less_cycle;
	class cycle;
	class stack;
	//typedef std::set<cycle, less_cycle>	SET_CYCLE;
}


{{ namespace_close }}

{{ include_block_close }}



