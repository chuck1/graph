{{ include_block_open }}

#include <iterator>
#include <set>

#include <gr/decl.hpp> // gr/decl.hpp.in
//#include <gr/vert.hpp> // gr/vert.hpp.in
#include <gr/vert_comp.hpp> // gr/vert_comp.hpp.in
#include <gr/edge.hpp> // gr/edge.hpp.in

{{ namespace_open }}

typedef std::iterator<std::input_iterator_tag, gr::edge> ITERATOR_EDGE;

/**
 * iterates on each unique edge of graph. first iterators on each vert, then
 * iterates on each edge of the vert's edge container if the opposite vert evaluates to
 * less than the first vert
 */
class EdgeGraphConst:
	public ITERATOR_EDGE
{
public:
	typedef gr::EDGE_S const &	reference;
	typedef gr::EDGE_S		value_type;

	typedef typename gr::CONT_VERT::const_iterator iterator0;
	typedef typename gr::CONT_EDGE::const_iterator iterator1;

	EdgeGraphConst(gr::container::vert const &, iterator0 const &);
	EdgeGraphConst(gr::container::vert const &, iterator0 const &, iterator1 const &);
	
	//EdgeGraphConst			operator=(EdgeGraphConst const &);

	/** prefix */
	EdgeGraphConst			operator++();
	/** postfix */
	EdgeGraphConst			operator++(int);
	
	virtual bool			check(gr::S_Edge const &);
	void				next();

	reference			operator*();
	value_type const *		operator->();

	bool				operator==(EdgeGraphConst const &);
	bool				operator!=(EdgeGraphConst const &);

private:
	gr::container::vert const &	_M_container;
	gr::CONT_VERT::iterator		_M_i;
	gr::CONT_EDGE::iterator		_M_j;
	//value_type			_M_value;
	//
	std::set<gr::EDGE_S>		_M_edges;
};


{{ namespace_close }}

{{ include_block_close }}

