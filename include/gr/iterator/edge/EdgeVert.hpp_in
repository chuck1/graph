{{ include_block_open }}

#include <iterator>

#include <gr/decl.hpp> // gr/decl.hpp_in
//#include <gr/vert.hpp> // gr/vert.hpp.in
//#include <gr/vert_comp.hpp> // gr/vert_comp.hpp.in
#include <gr/edge.hpp> // gr/edge.hpp.in

{{ namespace_open }}

typedef std::iterator<std::input_iterator_tag, gr::edge> ITERATOR_EDGE;

/**
 * iterates on each edge in a vert's edge container
 */
class EdgeVert:
	public ITERATOR_EDGE
{
public:
	typedef typename gr::CONT_EDGE::iterator iterator;

	typedef gr::EDGE_S const &	reference;
	typedef gr::EDGE_S		value_type;

	EdgeVert(gr::container::edge &, iterator);
	EdgeVert &			operator=(EdgeVert const &);

	void				next();
	virtual bool			check(gr::S_Edge const &);

	EdgeVert			operator++();
	/** postfix */
	EdgeVert			operator++(int);
	
	reference			operator*();
	value_type const *		operator->();

	bool				operator==(EdgeVert const &);
	bool				operator!=(EdgeVert const &);

//private:
	gr::container::edge &		_M_container;
	gr::CONT_EDGE::iterator		_M_i;
};



{{ namespace_close }}

{{ include_block_close }}

