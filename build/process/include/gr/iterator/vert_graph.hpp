/*
 * DO NOT EDIT THIS FILE
 *
 * graph/include/gr/iterator/vert_graph.hpp_in
 */

#ifndef GR_ITERATOR_VERT_GRAPH_HPP_IN
#define GR_ITERATOR_VERT_GRAPH_HPP_IN

#include <iterator>

#include <gr/decl.hpp> // gr/decl.hpp.in
#include <gr/vert.hpp> // gr/vert.hpp.in
#include <gr/vert_comp.hpp> // gr/vert_comp.hpp.in
//#include <gr/edge.hpp> // gr/edge.hpp.in

namespace gr {
namespace iterator {

typedef std::iterator<std::input_iterator_tag, gr::VERT_S> ITERATOR_VERT;

/**
 * iterates on each edge in a vert's edge container
 */
class vert_graph:
	public ITERATOR_VERT
{
public:
	typedef typename gr::CONT_VERT::iterator iterator;

	typedef gr::VERT_S const &	reference;
	typedef gr::VERT_S		value_type;

	vert_graph(gr::container::vert &, iterator);
	vert_graph			operator=(vert_graph const &);

	void				next();

	gr::iterator::vert_graph	operator++();
	/** postfix */
	gr::iterator::vert_graph	operator++(int);
	
	reference			operator*();
	value_type const *		operator->();

	bool				operator==(gr::iterator::vert_graph const &);
	bool				operator!=(gr::iterator::vert_graph const &);

//private:
	gr::container::vert &		_M_container;
	iterator			_M_j;
};


}}

#endif
